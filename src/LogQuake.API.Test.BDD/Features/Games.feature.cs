// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LogQuake.API.Test.BDD.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DadoQueSouUmJogadorDeQuakeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "Games.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-br"), "Dado que sou um jogador de Quake", @"	Eu quero efetuar upload de log de partidias efetuadas, e inserir essas niformações em banco de dados
	E consultar os dados das partidas efetuadas
	Para eu possa analisar as informações de cada partida, e verificar os participantes, total de mortes, mortes para cada jogador.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Dado que sou um jogador de Quake")))
            {
                global::LogQuake.API.Test.BDD.Features.DadoQueSouUmJogadorDeQuakeFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0 - obter Token por Client_Credentials")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Dado que sou um jogador de Quake")]
        public virtual void _0_ObterTokenPorClient_Credentials()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("0 - obter Token por Client_Credentials", null, ((string[])(null)));
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
 testRunner.Given("que a url do endpoint é \'http://localhost:59329/connect/token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 11
 testRunner.And("o verbo http é \'POST\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 12
 testRunner.And("o GrantType \'client_credentials\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 13
 testRunner.And("a senha do Client é \'secret2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 14
 testRunner.And("o scope é \'LogQuake\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 15
 testRunner.And("o Id do Cliente \'client2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 16
 testRunner.When("chamar o serviço de Servidor de Identidade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 17
 testRunner.Then("o statuscode da resposta deverá ser \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("1 - efetuar upload de arquivo de log do jogo Quake III Arena")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Dado que sou um jogador de Quake")]
        public virtual void _1_EfetuarUploadDeArquivoDeLogDoJogoQuakeIIIArena()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1 - efetuar upload de arquivo de log do jogo Quake III Arena", null, ((string[])(null)));
#line 19
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 20
 testRunner.Given("que a url do endpoint é \'http://localhost:65080/api/games/upload\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 21
 testRunner.And("o verbo http é \'POST\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 22
 testRunner.And("o arquivo de log está na pasta corrente do projeto \'Log\\games.log\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 23
 testRunner.And("obter o Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 24
 testRunner.When("chamar o serviço de upload", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 25
 testRunner.Then("o statuscode da resposta deverá ser \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 26
 testRunner.And("a quantidade de resgistro inseridos deve ser \'1058\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("2 - listar todas as partidas de forma paginada")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Dado que sou um jogador de Quake")]
        public virtual void _2_ListarTodasAsPartidasDeFormaPaginada()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2 - listar todas as partidas de forma paginada", null, ((string[])(null)));
#line 28
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 29
 testRunner.Given("que a url do endpoint é \'http://localhost:65080/api/games/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 30
 testRunner.And("o verbo http é \'GET\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 31
 testRunner.And("obter o Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 32
 testRunner.When("chamar o serviço", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 33
 testRunner.Then("o statuscode da resposta deverá ser \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("3 - obter jogo através de um identificador")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Dado que sou um jogador de Quake")]
        public virtual void _3_ObterJogoAtravesDeUmIdentificador()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3 - obter jogo através de um identificador", null, ((string[])(null)));
#line 35
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 36
 testRunner.Given("que a url do endpoint é \'http://localhost:65080/api/games/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 37
 testRunner.And("o verbo http é \'GET\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 38
 testRunner.And("o ID do jogo será \'5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 39
 testRunner.And("obter o Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 40
 testRunner.When("chamar o serviço", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 41
 testRunner.Then("o statuscode da resposta deverá ser \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 42
 testRunner.And("um total de \'130\' kills:", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "players"});
            table1.AddRow(new string[] {
                        "Isgalamido"});
            table1.AddRow(new string[] {
                        "Oootsimo"});
            table1.AddRow(new string[] {
                        "Zeh"});
            table1.AddRow(new string[] {
                        "Assasinu Credi"});
            table1.AddRow(new string[] {
                        "Mal"});
            table1.AddRow(new string[] {
                        "Dono da Bola"});
            table1.AddRow(new string[] {
                        "Chessus"});
#line 43
 testRunner.And("conter a lista abaixo de players:", ((string)(null)), table1, "E ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "player",
                        "countkill"});
            table2.AddRow(new string[] {
                        "Zeh",
                        "-7"});
            table2.AddRow(new string[] {
                        "Isgalamido",
                        "5"});
            table2.AddRow(new string[] {
                        "Oootsimo",
                        "5"});
            table2.AddRow(new string[] {
                        "Dono da Bola",
                        "-12"});
            table2.AddRow(new string[] {
                        "Assasinu Credi",
                        "3"});
            table2.AddRow(new string[] {
                        "Mal",
                        "-19"});
            table2.AddRow(new string[] {
                        "Chessus",
                        "-2"});
#line 52
 testRunner.And("conter a lista abaixo de kills:", ((string)(null)), table2, "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("4 - buscar uma partida inexistente através de um identificador")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Dado que sou um jogador de Quake")]
        public virtual void _4_BuscarUmaPartidaInexistenteAtravesDeUmIdentificador()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("4 - buscar uma partida inexistente através de um identificador", null, ((string[])(null)));
#line 62
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 63
 testRunner.Given("que a url do endpoint é \'http://localhost:65080/api/games/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 64
 testRunner.And("o verbo http é \'GET\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 65
 testRunner.And("o ID do jogo será \'999999\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 66
 testRunner.And("obter o Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 67
 testRunner.When("chamar o serviço", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 68
 testRunner.Then("o statuscode da resposta deverá ser \'NotFound\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("5 - obter jogo através de um identificador, mas informando um Token inválido")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Dado que sou um jogador de Quake")]
        public virtual void _5_ObterJogoAtravesDeUmIdentificadorMasInformandoUmTokenInvalido()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5 - obter jogo através de um identificador, mas informando um Token inválido", null, ((string[])(null)));
#line 70
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 71
 testRunner.Given("que a url do endpoint é \'http://localhost:65080/api/games/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 72
 testRunner.And("o verbo http é \'GET\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 73
 testRunner.And("o ID do jogo será \'5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 74
 testRunner.And("informar um Token inválido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 75
 testRunner.When("chamar o serviço", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 76
 testRunner.Then("o statuscode da resposta deverá ser \'InternalServerError\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("6 - obter Token por Password")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Dado que sou um jogador de Quake")]
        public virtual void _6_ObterTokenPorPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("6 - obter Token por Password", null, ((string[])(null)));
#line 78
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 79
 testRunner.Given("que a url do endpoint é \'http://localhost:59329/connect/token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 80
 testRunner.And("o verbo http é \'POST\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 81
 testRunner.And("o GrantType \'password\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 82
 testRunner.And("o Id do Cliente \'rop.client\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 83
 testRunner.And("a senha do Client é \'secret\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 84
 testRunner.And("o UserName é \'isgalamido\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 85
 testRunner.And("a senha do UserName é \'password\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 86
 testRunner.And("o scope é \'LogQuake\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 87
 testRunner.When("chamar o serviço de Servidor de Identidade", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 88
 testRunner.Then("o statuscode da resposta deverá ser \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
